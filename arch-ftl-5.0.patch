diff -uprN FTL-5.0/Makefile FTL-5.0.cust/Makefile
--- FTL-5.0/Makefile	2020-05-10 19:58:38.000000000 +0200
+++ FTL-5.0.cust/Makefile	2020-05-11 11:30:28.458273536 +0200
@@ -28,11 +28,11 @@ DNSMASQ_OBJ = arp.o dbus.o domain.o leas
               util.o conntrack.o dnssec.o ipset.o option.o rfc3315.o crypto.o dump.o ubus.o metrics.o
 
 # Get git commit version and date
-GIT_BRANCH := $(shell git branch | sed -n 's/^\* //p')
+GIT_BRANCH := master
 GIT_HASH := $(shell git --no-pager describe --always --dirty)
-GIT_VERSION := $(shell git --no-pager describe --tags --always --dirty)
-GIT_DATE := $(shell git --no-pager show --date=short --format="%ai" --name-only | head -n 1)
-GIT_TAG := $(shell git describe --tags --abbrev=0)
+GIT_VERSION := v5.0
+GIT_DATE := 2020-05-11
+GIT_TAG := v5.0
 
 # Is compiler at least gcc version 8? We cannot do ifgt in Makefile, so we use the shell expr command
 GCCVERSION8 := $(shell expr `$(CC) -dumpversion | cut -f1 -d.` \>= 8)
@@ -97,7 +97,7 @@ ifeq "$(GCCVERSION8)" "1"
 else
   EXTRAWARN_GCC8=
 endif
-EXTRAWARN=-Werror -Waddress -Wlogical-op -Wmissing-field-initializers -Woverlength-strings -Wformat -Wformat-nonliteral -Wuninitialized -Wswitch-enum -Wshadow \
+EXTRAWARN=-Waddress -Wlogical-op -Wmissing-field-initializers -Woverlength-strings -Wformat -Wformat-nonliteral -Wuninitialized -Wswitch-enum -Wshadow \
 -Wfloat-equal -Wbad-function-cast -Wwrite-strings -Wparentheses -Wlogical-op -Wstrict-prototypes -Wmissing-prototypes -Wredundant-decls -Winline $(EXTRAWARN_GCC8)
 
 # -FILE_OFFSET_BITS=64: used by stat(). Avoids problems with files > 2 GB on 32bit machines
@@ -107,7 +107,7 @@ CCFLAGS=-std=gnu11 -pipe -I$(IDIR) $(WAR
 # for FTL we need the pthread library
 # for dnsmasq we need the nettle crypto library and the gmp maths library
 # We link the two libraries statically. Although this increases the binary file size by about 1 MB, it saves about 5 MB of shared libraries and makes deployment easier
-LIBS=-pthread -lrt -Wl,-Bstatic -L/usr/local/lib -lhogweed -lgmp -lnettle
+LIBS=-pthread -lnettle -lrt -lgmp -lhogweed
 # Flags for compiling with libidn : -lidn
 # Flags for compiling with libidn2: -lidn2
 
diff -uprN FTL-5.0/src/config.c FTL-5.0.cust/src/config.c
--- FTL-5.0/src/config.c	2020-05-10 19:58:38.000000000 +0200
+++ FTL-5.0.cust/src/config.c	2020-05-11 11:30:28.466273552 +0200
@@ -54,7 +54,7 @@ void getLogFilePath(void)
 	}
 
 	// Read LOGFILE value if available
-	// defaults to: "/var/log/pihole-FTL.log"
+	// defaults to: "/run/log/pihole-ftl/pihole-FTL.log"
 	buffer = parse_FTLconf(fp, "LOGFILE");
 
 	errno = 0;
@@ -62,7 +62,7 @@ void getLogFilePath(void)
 	if(buffer == NULL || sscanf(buffer, "%127ms", &FTLfiles.log) != 1)
 	{
 		// Use standard path if no custom path was obtained from the config file
-		FTLfiles.log = strdup("/var/log/pihole-FTL.log");
+		FTLfiles.log = strdup("/run/log/pihole-ftl/pihole-FTL.log");
 	}
 
 	// Test if memory allocation was successful
@@ -303,13 +303,13 @@ void read_FTLconf(void)
 		logg("   DBIMPORT: Not importing history from database");
 
 	// PIDFILE
-	getpath(fp, "PIDFILE", "/var/run/pihole-FTL.pid", &FTLfiles.pid);
+	getpath(fp, "PIDFILE", "/run/pihole-ftl/pihole-FTL.pid", &FTLfiles.pid);
 
 	// PORTFILE
-	getpath(fp, "PORTFILE", "/var/run/pihole-FTL.port", &FTLfiles.port);
+	getpath(fp, "PORTFILE", "/run/pihole-ftl/pihole-FTL.port", &FTLfiles.port);
 
 	// SOCKETFILE
-	getpath(fp, "SOCKETFILE", "/var/run/pihole/FTL.sock", &FTLfiles.socketfile);
+	getpath(fp, "SOCKETFILE", "/run/pihole-ftl/FTL.sock", &FTLfiles.socketfile);
 
 	// SETUPVARSFILE
 	getpath(fp, "SETUPVARSFILE", "/etc/pihole/setupVars.conf", &FTLfiles.setupVars);
